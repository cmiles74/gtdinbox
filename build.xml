<?xml version="1.0"?>

<project name="gtdinbox" default="dist">

    <!-- load in user/machine specific build properties -->
    <property file="build.properties"/>

    <!-- project name and version values -->
    <property name="name" value="gtdinbox"/>
    <property name="name-macintosh" value="GTD Inbox"/>
    <property name="name-windows" value="GTDInbox"/>
    <property name="version" value="0.61a"/>

    <!-- project location -->
    <property name="project.dir" value="."/>

    <!-- where we keep the library code -->
    <property name="libraries.dir" value="libraries"/>

    <!-- libraries that we only need at build time -->
    <property name="libraries-build.dir" value="libraries-build"/>

    <!-- source code location -->
    <property name="source.dir" value="src"/>
    <property name="test.dir" value="test"/>

    <!-- destination for compiled code -->
    <property name="build.dir" value="classes"/>
    <property name="build-test.dir" value="classes"/>

    <!-- destination for the build application -->
    <property name="product.dir" value="dist"/>

    <!-- destination for xdoclet generated hibernate mappings -->
    <property name="mappings-generated.dir" value="mappings-generated"/>

    <!-- destination for the findbugs report -->
    <property name="findbugsOutput.dir" value="findbugs"/>

    <!-- destination for the junit report -->
    <property name="junitOutput.dir" value="junit"/>

    <!-- destination for javadoc output -->
    <property name="javadoc.dir" value="api"/>

    <!-- location of custom hibernate mappings -->
    <property name="mappings.dir" value="mappings"/>

    <!-- generate the project classpath -->
    <path id="project.classpath">
        <fileset dir="${libraries.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <!-- pull in build-time libraries -->
        <fileset dir="${libraries-build.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <!-- pull in xdoclet tasks and libraries -->
        <fileset dir="${xdoclet.dir}">
            <include name="lib/**/*.jar"/>
        </fileset>

        <!-- pull in findbugs tasks and libraries -->
        <fileset dir="${findbugs.home}">
            <include name="lib/**/*.jar"/>
        </fileset>
    </path>

    <!-- define the hibernate/xdoclet task for generating mapping files -->
    <taskdef name="hibernatedoclet"
             classname="xdoclet.modules.hibernate.HibernateDocletTask"
             classpathref="project.classpath"/>

    <!-- define the findbugs task -->
    <taskdef name="findbugs"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             classpathref="project.classpath"/>

    <!-- define the junit tasks -->
    <taskdef name="junit"
             classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
        <classpath>
            <pathelement location="${libraries-build.dir}/junit-4.1.jar"/>
            <pathelement location="${ant.home}/lib/ant-junit.jar"/>
        </classpath>
    </taskdef>

    <taskdef name="junitreport"
             classname="org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator">
        <classpath>
            <pathelement location="${libraries-build.dir}/junit-4.1.jar"/>
            <pathelement location="${ant.home}/lib/ant-junit.jar"/>
        </classpath>
    </taskdef>

    <!-- define the launch4j task -->
    <taskdef name="launch4j"
             classname="net.sf.launch4j.ant.Launch4jTask"
             classpath="${launch4j.home}/launch4j.jar:${launch4j.home}/lib/xstream.jar"/>

    <!-- define the IzPack task -->
    <taskdef name="izpack"
             classpath="${izpack.home}/lib/compiler.jar"
             classname="com.izforge.izpack.ant.IzPackTask"/>

    <!-- initialization -->
    <target name="init">
        <condition property="isMacintosh">
            <os family="mac"/>
        </condition>
    </target>

    <!-- clean out compiled and generated code -->
    <target name="clean" depends="init" description="Removed all build artifacts">
        <delete dir="${build.dir}/com/nervestaple"/>
        <delete dir="${build.dir}/com/intellij"/>
        <delete dir="${product.dir}/${name}"/>
        <delete dir="${product.dir}/${name-macintosh}.app"/>
        <delete dir="${product.dir}/${name-windows}-windows"/>
        <delete>
            <fileset dir="${product.dir}" includes="**"/>
        </delete>
        <delete dir="data"/>
        <delete file="derby.log"/>
        <delete file="com.nervestaple.gtdinbox.properties"/>
    </target>

    <!-- setup for the build -->
    <target name="prepare" depends="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${product.dir}"/>
        <mkdir dir="${mappings.dir}"/>
        <mkdir dir="${mappings-generated.dir}"/>
        <mkdir dir="${findbugsOutput.dir}"/>
        <mkdir dir="${junitOutput.dir}"/>
        <mkdir dir="${junitOutput.dir}/html"/>
    </target>

    <!-- compile the source code -->
    <target name="compile" depends="prepare">

        <javac srcdir="${source.dir}"
               destdir="${build.dir}"
               debug="true"
               deprecation="false"
               optimize="true"
               classpathref="project.classpath">

            <include name="com/nervestaple/**/*.java"/>
        </javac>

        <javac srcdir="${test.dir}"
               destdir="${build-test.dir}"
               debug="true"
               deprecation="false"
               optimize="true"
               classpathref="project.classpath">

            <include name="com/nervestaple/**/*.java"/>
        </javac>

        <!-- copy out our resources into the build directory -->
        <copy todir="${build.dir}">
            <fileset dir="${source.dir}" includes="com/nervestaple/gtdinbox/**/*.png"/>
            <fileset dir="${source.dir}" includes="com/nervestaple/gtdinbox/**/*.xml"/>
            <fileset dir="${source.dir}" includes="com/nervestaple/gtdinbox/**/*.properties"/>
        </copy>
    </target>

    <!-- generate hibernate mapping files -->
    <target name="xdoclet" depends="prepare" description="Generated Hibernate 2 mapping files">
        <hibernatedoclet destdir="${mappings-generated.dir}/"
                         excludedtags="@version,@author,@todo"
                         force="true"
                         mergedir="${mappings.dir}">

            <fileset dir="${source.dir}">
                <include name="com/nervestaple/gtdinbox/model/**/*.java"/>
            </fileset>
            <hibernate version="3.0"/>
        </hibernatedoclet>

        <copy todir="${build.dir}">
            <fileset dir="${mappings-generated.dir}" includes="**/*.*"/>
        </copy>
    </target>

    <!-- run the junit tests -->
    <target name="test" depends="compile" description="Generates JUnit test report">
        <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="yes" tempdir="${build-test.dir}">
            <classpath>
                <pathelement location="${build.dir}"/>
                <pathelement location="${build-test.dir}"/>
                <fileset dir="${libraries.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement location="${project.dir}/properties/"/>
                <pathelement location="${project.dir}/resources/"/>
            </classpath>
            <formatter type="plain" usefile="true"/>
            <formatter type="xml"/>
            <batchtest todir="${junitOutput.dir}">
                <fileset dir="${test.dir}">
                    <include name="**/Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- generate findbugs report -->
    <target name="findbugs" depends="compile" description="Generates FindBugs report">
        <findbugs home="${findbugs.home}"
                  output="html"
                  outputFile="${findbugsOutput.dir}/gtdinbox-fb.html"
                  jvmargs="-Xmx512m">
            <auxClassPath>
                <fileset dir="${libraries.dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${libraries-build.dir}">
                    <include name="**/*.jar"/>
                </fileset>
            </auxClassPath>
            <sourcePath path="${source.dir}"/>
            <class location="${build.dir}"/>
        </findbugs>
    </target>

    <!-- generate javadoc -->
    <target name="javadoc" depends="compile" description="Generates JavaDoc">
        <javadoc packagenames="com.nervestaple.gtdinbox.*"
                 sourcepath="${source.dir}"
                 classpathref="project.classpath"
                 defaultexcludes="yes"
                 destdir="${javadoc.dir}"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="GTD Inbox API">
            <doctitle><![CDATA[<h1>GTD Inbox</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2006 Nervestaple Development. All Rights Reserved.</i>]]></bottom>
            <tag name="todo" scope="all" description="To do:"/>
        </javadoc>
    </target>

    <!-- generates junit report -->
    <target name="report" depends="compile, findbugs, javadoc, test" description="Generates reports about the project">
        <junitreport todir="${junitOutput.dir}">
            <fileset dir="${junitOutput.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junitOutput.dir}/html"/>
        </junitreport>
    </target>

    <!-- gather up all of the libraries, property files, etc. for distribution -->
    <target name="resources" depends="compile, xdoclet"
            description="Gathers Resources needed for application">

        <copy todir="${product.dir}/${name}/libraries">
            <fileset dir="${project.dir}/libraries/"/>
        </copy>

        <copy todir="${product.dir}/${name}/properties">
            <fileset dir="${project.dir}/properties/"/>
        </copy>

        <copy todir="${product.dir}/${name}/resources/">
            <fileset dir="${project.dir}/resources/"/>
        </copy>
    </target>

    <!-- create a java jar file from the build directory -->
    <target name="jarfile" depends="resources" description="Builds a Pure Java JAR File for the Application">

        <jar destfile="${product.dir}/${name}/${name}.jar"
             manifest="${project.dir}/Manifest.mf">

            <fileset dir="${build.dir}" includes="com/nervestaple/**/*.*"/>
        </jar>
    </target>

    <!-- create a macintosh application bundle

        NOTE: the macintosh application bundle is *only* created if the project is being built on a Macintosh
        machine.
    -->
    <target name="macintosh" depends="jarfile" if="isMacintosh" description="Builds a Mac OS X Application Bundle">
        <mkdir dir="${product.dir}/${name-macintosh}.app/Contents/MacOS"/>
        <mkdir dir="${product.dir}/${name-macintosh}.app/Contents/Resources/Java"/>
        <copy file="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub"
              tofile="${product.dir}/${name-macintosh}.app/Contents/MacOS/${name}"/>
        <copy todir="${product.dir}/${name-macintosh}.app/Contents"
              file="${project.dir}/macintosh/Info.plist"/>
        <echo file="${product.dir}/${name-macintosh}.app/Contents/PkgInfo" append="false">APPL????</echo>
        <copy todir="${product.dir}/${name-macintosh}.app/Contents/Resources/">
            <fileset dir="${project.dir}/macintosh/" includes="*.icns"/>
        </copy>

        <copy todir="${product.dir}/${name-macintosh}.app/Contents/Resources/Java">
            <fileset dir="${product.dir}/${name}/"/>
        </copy>

        <chmod file="${product.dir}/${name-macintosh}.app/Contents/MacOS/${name}" perm="775"/>
    </target>

    <target name="windows" depends="jarfile" description="Builds a Windows Executable">
        <mkdir dir="${product.dir}/${name-windows}-windows"/>
        <copy todir="${product.dir}/${name-windows}-windows">
            <fileset dir="${product.dir}/${name}/"/>
        </copy>
        <copy todir="${product.dir}/${name-windows}-windows">
            <fileset dir="${project.dir}/windows/"/>
        </copy>

        <!-- create a windows executable to launch the app -->
        <launch4j configFile="launch4j.config.xml"/>

        <!-- create the IzPack installer -->
        <izpack input="${project.dir}/install.xml"
                output="${product.dir}/${name}-windows-install.jar"
                installerType="standard"
                basedir="${project.dir}"
                izPackDir="${izpack.home}/"/>

        <!-- wrap the installer in a windows exectuable -->
        <launch4j configFile="launch4j-win-installer.config.xml"/>

        <!-- zip the windows installer -->
        <zip destfile="${product.dir}/${name}-${version}-windows-install.zip">
            <zipfileset file="${product.dir}/gtdinbox-windows-install.exe"/>
        </zip>
    </target>

    <!-- create a zip archive of the java application package -->
    <target name="dist-java" depends="clean,jarfile,macintosh,windows" description="Build the distribution">
        <echo message="Building distribution"/>

        <zip destfile="${product.dir}/${name}-${version}.zip">
            <zipfileset dir="${product.dir}/${name}" prefix="${name}"/>
        </zip>
        <zip destfile="${product.dir}/${name}-windows-${version}.zip">
            <zipfileset dir="${product.dir}/${name-windows}-windows" prefix="${name-windows}"/>
        </zip>
    </target>

    <!-- create a zip archive of the macintosh application bundle -->
    <target name="dist" depends="dist-java" if="isMacintosh" description="Builds the Mac OS X distribution">

        <zip destfile="${product.dir}/${name}-mac-${version}.zip">
            <zipfileset dir="${product.dir}/${name-macintosh}.app" prefix="${name-macintosh}.app"/>
            <zipfileset dir="${product.dir}/${name-macintosh}.app"
                        includes="Contents/MacOS/${name}" filemode="775"
                        prefix="${name-macintosh}.app"/>
        </zip>
    </target>
</project>